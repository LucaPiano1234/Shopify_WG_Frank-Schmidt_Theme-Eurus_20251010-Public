<div x-data="xCustomizePicker()">
  {% liquid
    assign placeholder_text = option_name
    if placeholder != blank
      assign placeholder_text = placeholder | escape
    endif
    assign select_linked = false
    assign swatch_linked = false
    if picker_type == 'checkbox' or picker_type == 'dropdown' or picker_type == 'radio_button'
      if select_linked_products != blank or select_linked_collections != blank
        assign select_linked = true
      endif
    endif
    if picker_type == 'color_swatches' or picker_type == 'button'
      if swatch_linked_products != blank or swatch_linked_collections != blank
        assign swatch_linked = true
      endif
    endif
  %}
  {% capture product_placeholder_icon %}{%- render 'icon-placeholder', icon: 'icon-product-url', class: 'w-full h-full' -%}{% endcapture %}
  {% case picker_type %}
    {% when 'single_text' %}
      {% if option_label %}
        <p class="mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
      {% endif %}
      <div class="flex-1 relative" x-data="{ single_text_input: '' }">
        <input
          id="{{ block_id }}"
          type="text" name="properties[{{ option_name }}]"
          class="customization-picker placeholder:text-[rgba(var(--colors-text),0.5)] w-full pl-5 pr-5 pt-3 pb-3 md:pt-4 md:pb-4 border focus:outline-none focus:border-current input bg-transparent{% if settings.edges_type == 'rounded_corners' %} !rounded-md{% endif %}"
          form="{{ product_form_id }}"
          x-model="single_text_input"
          placeholder="{{ placeholder_text }}"
          {% if required %} 
            required
            x-on:input.change="validation($el)"
          {% else %}
            x-on:input.change="setValueBlank($el)"
          {% endif %}
          {% if max_text_length > 0 %}
            maxlength="{{ max_text_length }}"
          {% endif %}
        >
        {% if required %}
          <p class="text-required hidden text-[rgba(var(--color-error))] mt-1">{{ 'products.product.customize_option_required' | t }}</p>
        {% endif %}
        {% if option_text_note != blank %}
          <p class="mt-2">{{ option_text_note | escape }}</p>
        {% endif %}
        {% unless required or hide_when_empty %} 
          <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.text_blank' | t }}' : single_text_input" >
        {% endunless %}
        <input class="hidden" :value="single_text_input" type="text" name="properties[{{ option_name }}]" form="{{ product_form_id_sticky }}" placeholder="{{ option_name }}">
      </div>
    {% when 'multi_text' %}
      {% if option_label %}
        <p class="mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
      {% endif %}
      <div class="relative" x-data="{ multi_text_input: '' }">
        <textarea
          id="{{ block_id }}"
          name="properties[{{ option_name }}]"
          class="customization-picker placeholder:text-[rgba(var(--colors-text),0.5)] w-full pl-5 pr-5 pt-4 pb-4 border focus:outline-none focus:border-current bg-transparent{% if settings.edges_type == 'rounded_corners' %} !rounded-md{% endif %}"
          form="{{ product_form_id }}"
          placeholder="{{ placeholder_text }}"
          x-model="multi_text_input"
          rows="4"
          {% if required %} 
            required
            x-on:input.change="validation($el)"
          {% else %}
            x-on:input.change="setValueBlank($el)"
          {% endif %}
          {% if max_text_length > 0 %}
            maxlength="{{ max_text_length }}"
          {% endif %}
        ></textarea>
        <p class="text-required hidden text-[rgba(var(--color-error))] mt-1">{{ 'products.product.customize_option_required' | t }}</p>
        {% if option_text_note != blank %}
          <p class="mt-2">{{ option_text_note | escape }}</p>
        {% endif %}
        {% unless required or hide_when_empty %} 
          <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.text_blank' | t }}' : multi_text_input">
        {% endunless %}
        <textarea
          class="hidden"
          rows="4"
          :value="multi_text_input"
          name="properties[{{ option_name }}]"
          form="{{ product_form_id_sticky }}"
          placeholder="{{ option_name }}"
        ></textarea>
      </div>
    {% when 'radio_button' %}
      <fieldset>
        {% if select_linked %}
          {% liquid
            assign product_list = ''
            paginate select_linked_collections.products by 12
              assign product_list = select_linked_collections.products
            endpaginate
            if select_linked_products != blank
              assign product_list = select_linked_products
            endif
            assign not_available = true
            for product in product_list
              if product.available
                assign not_available = false
              endif
            endfor
          %}
          {% unless not_available %}
            <legend class="mb-3 font-{{ option_style }}">
              {{ option_label }}{% if required %} *{% endif %}<span x-init="$watch('radioChecked', () => { $el.innerHTML = '' })" class="selected-variant-name"></span>
            </legend>
            {% style %}
              .product-input-container-{{ block_id }} .product-input-{{ block_id }}:first-child {
                border-width: 0px;
              }
            {% endstyle %}
            <div class="product-input-container-{{ block_id }} text-start flex flex-col border border-solid{% if settings.edges_type == 'rounded_corners' %} rounded-[10px]{% endif %}">
              {% for product in product_list %} 
                {% unless product.available %}{% continue %}{% endunless %}
                <div class="product-input-{{ block_id }} flex pt-2 pb-2 pl-2 pr-2 border-t w-full gap-1 items-center"> 
                  <input x-on:input.change="radioCheckedTitle='{{ product.title | replace: '"', '\\&quot;' | replace: "'", "\\&#39;" | replace: '`', '\\&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}';" x-model="radioChecked" class="radio-checked relative h-4 w-4 border focus:outline-none rounded-full cursor-pointer" type="radio" id="{{ block_id }}-{{ forloop.index }}" name="{{ block_id }}" value="{{ product.id }}"{% if required and forloop.first %} x-init="radioChecked='{{ product.id }}'; radioCheckedTitle='{{ product.title | replace: '"', '\\&quot;' | replace: "'", "\\&#39;" | replace: '`', '\\&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}';" checked{% endif %}>
                  <label for="{{ block_id }}-{{ forloop.index }}" class="flex flex-1 cursor-pointer pl-2 rtl:pl-0 rtl:pr-2 bg-transparent items-center gap-2">
                    {%- liquid
                      assign preview_image = blank
                      if product.featured_media
                        assign preview_image = product.featured_media | image_url: width: 30, height: 30
                      endif
                    -%}
                    {%- style -%}
                      .image-{{ product.id }}-{{ block_id }}-{{ forloop.index }}:before {
                        {% if preview_image != blank %}
                          background-image: url({{ preview_image }});
                        {% else %}
                          background-image: url("data:image/svg+xml,{{ product_placeholder_icon | replace: "#", "%23" | replace: "<", "%3C" | replace: ">", "%3E" | replace: '"', "%22" }}");
                          background-color: #c9c9c9;
                        {% endif %}
                      }
                    {%- endstyle %}
                    {% liquid 
                      assign price = product.price | default: 1999
                      if settings.currency_code_enable
                        assign money_price = price | money_with_currency
                      else 
                        assign money_price = price | money
                      endif 

                      if product.price_varies
                        assign money_price = 'products.product.price.from_price_html' | t: price: money_price
                      endif
                    %}
                    <div class="w-10 h-10 min-w-[40px] min-h-[40px] image-{{ product.id }}-{{ block_id }}-{{ forloop.index }} {% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %} border border-solid before:block before:w-full before:h-full pt-1 pb-1 pl-1 pr-1"></div>
                    <div class="cursor-pointer">{{ product.title | replace: '<', '&lt;' | replace: '>', '&gt;' }} <span x-init="$watch('radioChecked', () => { $el.innerHTML = '+ {{ money_price }}' })" class="variant-price-{{ product.id }} text-[rgba(var(--colors-price))]">+ {{ money_price }}</span></div>
                  </label>
                </div>
              {% endfor %}
            </div>
            {% for product in product_list %}
              {% unless product.available %}{% continue %}{% endunless %}
              <div 
                {% unless product.has_only_default_variant %}
                  x-cloak
                  x-show="radioChecked === `{{ product.id }}`" 
                  class="x-product-data-container flex flex-col pt-4"
                  x-init="$watch('radioChecked', () => { 
                    Array.from($el.querySelectorAll('.option-selected-value')).forEach((el) => { el.innerHTML = '' });
                    Array.from($el.querySelectorAll('input')).forEach((el) => { el.checked = false });
                    if (radioChecked === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'
                    }
                  })"
                {% else %}
                  class="hidden"
                  x-init="$watch('radioChecked', () => {
                    if (radioChecked === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}';
                    }
                  })"
                {% endunless %}
              >
                <input :disabled="radioChecked !== `{{ product.id }}`" type="hidden" name="properties[_linked_product_id][]" form="{{ product_form_id }}" {% if product.has_only_default_variant %}value="{{ product.selected_or_first_available_variant.id }}"{% endif %}>
                {% assign block_id = block_id | append: product.id %}
                {% unless product.has_only_default_variant %}
                  {% render 'customize-picker-choose-option',
                    block_id: block_id,
                    product: product,
                    forloop: forloop,
                    show_content_center: show_content_center
                  %}
                {% endunless %}
              </div>
            {% endfor %}
            <input 
              x-model="radioCheckedTitle"  
              value=""
              class="customization-picker hidden" 
              type="text" 
              name="properties[{{ option_name }}]" 
              form="{{ product_form_id }}" 
              aria-label="{{ option_name }}"
              {% unless required %}
                x-init="$watch('radioChecked',() => setValueBlank($el))"
                :disabled="disableInput"
              {% endunless %}
            >
            {% if option_select_note != blank %}
              <p class="mt-2">{{ option_select_note | escape }}</p>
            {% endif %}
            {% unless required or hide_when_empty %}
              <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : radioCheckedTitle">
            {% endunless %}
            <input
              class="hidden"
              :value="radioCheckedTitle"
              type="text"
              name="properties[{{ option_name }}]"
              form="{{ product_form_id_sticky }}"
              placeholder="{{ option_name }}"
            >
          {% endunless %}
        {% else %}
          <legend class="mb-3 font-{{ option_style }}">
            {{ option_label }}{% if required %} *{% endif %}
          </legend>
          {% liquid
            assign option_lists = option_list | split: ";"
          %}
          <div class="eurus flex flex-wrap md:gap-x-8 gap-x-5 gap-y-3{% if show_content_center %} justify-center{% endif %}">
            {% for option in option_lists %} 
              <div class="flex"> 
                <input x-model="radioChecked" class="radio-checked relative h-4 w-4 border focus:outline-none rounded-full cursor-pointer" type="radio" id="{{ block_id }}-{{ forloop.index }}" name="{{ block_id }}" value="{{ option }}"{% if required and forloop.first %} x-init="radioChecked='{{option}}'" checked{% endif %}>
                <label class="flex-1 cursor-pointer pl-2 rtl:pl-0 rtl:pr-2 bg-transparent" for="{{ block_id }}-{{ forloop.index }}">
                  {{ option }}
                </label>
              </div>
            {% endfor %}
          </div>
          <input 
            x-model="radioChecked"  
            value=""
            class="customization-picker hidden" 
            type="text" 
            name="properties[{{ option_name }}]" 
            form="{{ product_form_id }}" 
            aria-label="{{ option_name }}"
            {% unless required %}
              x-init="$watch('radioChecked',() => setValueBlank($el))"
              :disabled="disableInput"
            {% endunless %}
          >
          {% if option_select_note != blank %}
            <p class="mt-2">{{ option_select_note | escape }}</p>
          {% endif %}
          {% unless required or hide_when_empty %}
            <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : radioChecked">
          {% endunless %}
          <input
            class="hidden"
            :value="radioChecked"
            type="text"
            name="properties[{{ option_name }}]"
            form="{{ product_form_id_sticky }}"
            placeholder="{{ option_name }}"
          >
        {% endif %}
      </fieldset>
    {% when 'color_picker' %}
      {% liquid
        if settings.edges_type == 'rounded_corners'
          assign rounded = 'rounded-md'
        endif
        if swatch_style == 'round'
          assign rounded = 'rounded-full'
        endif 
      %} 
      <div x-data="{ color: '#000000'}">
        {% if option_label %}
          <div class="mb-3">
            <span class="font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}: </span><span class="text-[rgba(var(--colors-text-link))]" x-text="color"></span>
          </div>
        {% endif %}
        <div class="w-full{% if show_content_center %} text-center{% endif %}">
          <div class="relative inline-block">
            <input x-model="color" class="customization-picker cursor-pointer h-10 w-10 pt-0.5 pb-0.5 pl-1 pr-1 absolute left-0 rtl:right-0 rtl:left-auto top-0 opacity-0 z-10" type="color" value="#000000" name="properties[{{ option_name }}]" form="{{ product_form_id }}" aria-label="{{ option_name }}"/>
            <div class="h-10 w-10 cursor-pointer {{ rounded }}" x-bind:style="'background-color: ' + color"></div>
          </div>
        </div>
        <input
          class="hidden"
          :value="color"
          type="text"
          name="properties[{{ option_name }}]"
          form="{{ product_form_id_sticky }}"
          placeholder="{{ option_name }}"
        >
      </div>
    {% when 'date' %}
      <div x-data="{ date: '' }">
        {% if option_label %}
          <p class="mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
        {% endif %}
        <input 
          type="date"
          x-model="date" 
          class="customization-picker input-date-time appearance-none cursor-pointer min-h-[45px] pl-5 pr-5 pt-3 pb-3 md:pt-3.5 md:pb-3.5 w-full border border-solid bg-[rgba(var(--background-color),1)]{% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %}" 
          value=""
          {% if min_date %} min="{{ min_date }}"{% endif %}
          {% if max_date %} max="{{ max_date }}"{% endif %} 
          name="properties[{{ option_name }}]" 
          form="{{ product_form_id }}"
          {% if required %} 
            required x-on:input.change="validation($el)"
          {% else %}
            x-on:input.change="setValueBlank($el)"
          {% endif %} 
          aria-label="{{ option_name }}"
        />
        {% if required %}
          <span class="mt-1 text-required text-[rgba(var(--color-error))] hidden">{{ 'products.product.customize_option_required' | t }}</span>
        {% endif %}
        {% unless required or hide_when_empty %}
          <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : date">
        {% endunless %}
        <input
          class="hidden"
          :value="date"
          type="text"
          name="properties[{{ option_name }}]"
          form="{{ product_form_id_sticky }}"
          placeholder="{{ option_name }}"
        >
      </div>
    {% when 'time' %}
      <div x-data="{ time: '' }">
        {% if option_label %}
          <p class="mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
        {% endif %}
        <input 
          type="time" 
          class="customization-picker input-date-time appearance-none cursor-pointer min-h-[45px] pl-5 pr-5 pt-3 pb-3 md:pt-3.5 md:pb-3.5 w-full border border-solid bg-[rgba(var(--background-color),1)]{% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %}" 
          value="" 
          name="properties[{{ option_name }}]" 
          form="{{ product_form_id }}"
          x-model="time" 
          {% if required %} 
            required 
            x-on:input.change="validation($el)"
          {% else %}
            x-on:input.change="setValueBlank($el)"
          {% endif %} 
          aria-label="{{ option_name }}"
        />
        {% if required %}
          <span class="mt-1 text-required text-[rgba(var(--color-error))] hidden">{{ 'products.product.customize_option_required' | t }}</span>
        {% else %}
          {% unless hide_when_empty %}
            <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : time">
          {% endunless %}
        {% endif %}
        <input
          class="hidden"
          :value="time"
          type="time"
          name="properties[{{ option_name }}]"
          form="{{ product_form_id_sticky }}"
          placeholder="{{ option_name }}"
        >
      </div>
    {% when 'checkbox' %}
        {% if select_linked %}
          {% liquid
            assign product_list = ''
            paginate select_linked_collections.products by 12
              assign product_list = select_linked_collections.products
            endpaginate
            if select_linked_products != blank
              assign product_list = select_linked_products
            endif
            assign not_available = true
            for product in product_list
              if product.available
                assign not_available = false
              endif
            endfor
          %}
          {% unless not_available %}
            <fieldset class="customize-checkbox eurus">
              {% if option_label %}
                <p class="option-name mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
              {% endif %}
              {% style %}
                .product-input-container-{{ block_id }} .product-input-{{ block_id }}:first-child {
                  border-width: 0px;
                }
              {% endstyle %}
              <div class="product-input-container-{{ block_id }} text-start flex flex-col border border-solid{% if settings.edges_type == 'rounded_corners' %} rounded-[10px]{% endif %}">
                {% for product in product_list %}  
                  {% unless product.available %}{% continue %}{% endunless %}
                  <div class="product-input-{{ block_id }} pl-2 pr-2 pt-2 pb-2 border-t border-solid flex w-full gap-1 items-center">
                    <input 
                      x-model="dataCheckbox" 
                      class="checkbox checkbox-checked h-4 w-4 border checked:border-[rgba(var(--colors-text-link))] checked:bg-[rgba(var(--colors-text-link))] relative cursor-pointer{% if settings.edges_type == 'rounded_corners' %} rounded{% else %} rounded-none{% endif %}" 
                      type="checkbox" 
                      id="{{ block_id }}-{{ forloop.index }}" 
                      name="{{ block_id }}" 
                      value="{{ product.id }}"
                      x-on:input.change="$el.checked ? dataCheckboxTitle.push('{{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}') : dataCheckboxTitle.splice(dataCheckboxTitle.indexOf('{{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'), 1)"
                    >
                    <label for="{{ block_id }}-{{ forloop.index }}" class="{% if show_content_center %}w-fit{% else %}flex-1{% endif %} flex gap-2 items-center pl-2 rtl:pl-0 rtl:pr-2 cursor-pointer">
                      {%- liquid
                        assign preview_image = blank
                        if product.featured_media
                          assign preview_image = product.featured_media | image_url: width: 30, height: 30
                        endif
                      -%}
                      {%- style -%}
                        .image-{{ product.id }}-{{ block_id }}-{{ forloop.index }}:before {
                          {% if preview_image != blank %}
                            background-image: url({{ preview_image }});
                          {% else %}
                            background-image: url("data:image/svg+xml,{{ product_placeholder_icon | replace: "#", "%23" | replace: "<", "%3C" | replace: ">", "%3E" | replace: '"', "%22" }}");
                            background-color: #c9c9c9;
                          {% endif %}
                        }
                      {%- endstyle %}
                      {% liquid 
                        assign price = product.price | default: 1999
                        if settings.currency_code_enable
                          assign money_price = price | money_with_currency
                        else 
                          assign money_price = price | money
                        endif 

                        if product.price_varies
                          assign money_price = 'products.product.price.from_price_html' | t: price: money_price
                        endif
                      %}
                      <div class="w-10 h-10 min-w-[40px] min-h-[40px] image-{{ product.id }}-{{ block_id }}-{{ forloop.index }} {% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %} border border-solid before:block before:w-full before:h-full pt-1 pb-1 pl-1 pr-1"></div>
                      <div class="cursor-pointer">{{ product.title | replace: '<', '&lt;' | replace: '>', '&gt;' }} <span x-init="$watch('dataCheckbox', () => { if (!dataCheckbox.includes(`{{ product.id }}`)) $el.innerHTML = '+ {{ money_price }}' })" class="variant-price-{{ product.id }} text-[rgba(var(--colors-price))]">+ {{ money_price }}</span></div>
                    </label>
                  </div>
                {% endfor %}
              </div>
              {% for product in product_list %}
                {% unless product.available %}{% continue %}{% endunless %}
                <div 
                  {% unless product.has_only_default_variant %}
                    x-cloak
                    x-show="dataCheckbox.includes(`{{ product.id }}`)" 
                    class="x-product-data-container flex flex-col pt-4 w-full{% if show_content_center %} items-center{% endif %}"
                    x-init="$watch('dataCheckbox', () => { 
                      if (!dataCheckbox.includes(`{{ product.id }}`)) {
                        Array.from($el.querySelectorAll('.option-selected-value')).forEach((el) => { el.innerHTML = '' });
                        Array.from($el.querySelectorAll('input')).forEach((el) => { el.checked = false });
                      }
                    })"
                  {% endunless %}
                >
                  <input :disabled="!dataCheckbox.includes(`{{ product.id }}`)" type="hidden" name="properties[_linked_product_id][]" form="{{ product_form_id }}" {% if product.has_only_default_variant %}value="{{ product.selected_or_first_available_variant.id }}"{% endif %}>
                  {% unless product.has_only_default_variant %}
                    {% assign block_id = block_id | append: product.id %}
                    {% render 'customize-picker-choose-option',
                      block_id: block_id,
                      product: product,
                      forloop: forloop,
                      show_content_center: show_content_center,
                      checkbox: true
                    %}
                  {% endunless %}
                </div>
              {% endfor %}
              <input 
                x-model="dataCheckboxTitle.join('; ')"  
                value=""
                class="customization-picker hidden{% if minimum_select_value > 0 and required %} validate-checkbox{% endif %}" 
                type="text" 
                name="properties[{{ option_name }}]" 
                form="{{ product_form_id }}" 
                {% if required %}
                  x-init="$watch('dataCheckbox', () => validateCheckBox($el,{{ minimum_select_value | default: 0 }},{{ maximum_select_value | default: 0 }}))"
                {% else %}
                  x-init="$watch('dataCheckbox', () => setValueBlank($el))"
                  :disabled="disableInput"
                {% endif %}
                aria-label="{{ option_name }}"
              >
              {% unless required or hide_when_empty %}
                <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : dataCheckboxTitle.join('; ')">
              {% endunless %}
              <input
                class="hidden"
                :value="dataCheckboxTitle.join('; ')"
                type="text"
                name="properties[{{ option_name }}]"
                form="{{ product_form_id_sticky }}"
                placeholder="{{ option_name }}"
              >
              <p class="text-required hidden text-[rgba(var(--color-error))] top-full mt-1">{{ 'products.product.customize_option_msg_checkbox' | t: minimum_select_value: minimum_select_value }}</p>
              {% if option_select_note != blank %}
                <p class="mt-2">{{ option_select_note | escape }}</p>
              {% endif %}
            </fieldset>
          {% endunless %}
        {% else %}
          <div class="customize-checkbox eurus">
            {% if option_label %}
              <p class="option-name mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
            {% endif %}
            {% liquid
              assign option_lists = option_list | split: ";"
              if minimum_select_value < 1 and required
                assign minimum_select_value = 1
              endif
            %}
            <div class="flex flex-wrap md:gap-x-8 gap-x-5 gap-y-3{% if show_content_center %} justify-center{% endif %}">
              {% for option in option_lists %}  
                <div class="flex items-center w-fit">
                  <input 
                    x-model="dataCheckbox" 
                    class="checkbox checkbox-checked h-4 w-4 border checked:border-[rgba(var(--colors-text-link))] checked:bg-[rgba(var(--colors-text-link))] relative cursor-pointer{% if settings.edges_type == 'rounded_corners' %} rounded{% else %} rounded-none{% endif %}" 
                    type="checkbox" 
                    id="{{ block_id }}-{{ forloop.index }}" 
                    name="{{ block_id }}" 
                    value="{{ option }}"
                  >
                  <label class="flex-1 pl-2 rtl:pl-0 rtl:pr-2 cursor-pointer" for="{{ block_id }}-{{ forloop.index }}">{{ option }}</label>
                </div>
              {% endfor %}
            </div>
            <input 
              x-model="dataCheckbox.join('; ')"  
              value=""
              class="customization-picker hidden{% if minimum_select_value > 0 and required %} validate-checkbox{% endif %}" 
              type="text" 
              name="properties[{{ option_name }}]" 
              form="{{ product_form_id }}" 
              {% if required %}
                x-init="$watch('dataCheckbox', () => validateCheckBox($el,{{ minimum_select_value | default: 0 }},{{ maximum_select_value | default: 0 }}))"
              {% else %}
                x-init="$watch('dataCheckbox', () => setValueBlank($el))"
                :disabled="disableInput"
              {% endif %}
              aria-label="{{ option_name }}"
            >
            <p class="text-required hidden text-[rgba(var(--color-error))] top-full mt-1">{{ 'products.product.customize_option_msg_checkbox' | t: minimum_select_value: minimum_select_value }}</p>
            {% unless required or hide_when_empty %}
              <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : dataCheckbox.join('; ')">
            {% endunless %}
            <input
              class="hidden"
              :value="dataCheckbox.join('; ')"
              type="text"
              name="properties[{{ option_name }}]"
              form="{{ product_form_id_sticky }}"
              placeholder="{{ option_name }}"
            >
          </div>
          {% if option_select_note != blank %}
            <p class="mt-2">{{ option_select_note | escape }}</p>
          {% endif %}
        {% endif %}
    {% when 'dropdown' %}
      {% if select_linked %}
        {% liquid
          assign product_list = ''
          paginate select_linked_collections.products by 12
            assign product_list = select_linked_collections.products
          endpaginate
          if select_linked_products != blank
            assign product_list = select_linked_products
          endif
          assign not_available = true
          for product in product_list
            if product.available
              assign not_available = false
            endif
          endfor
        %}
        {% unless not_available %}
          <fieldset class="p-break-words" x-data="{ dropdown: '', productTitle: '' }">
            {% if option_label %}
              <p class="mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}<span x-init="$watch('dropdown', () => { $el.innerHTML = '' })" class="selected-variant-name"></span></p>
            {% endif %}
            <div class="select relative outline-none eurus">
              <div 
                class="customization-picker relative w-full pt-3 pb-3 md:pt-4 md:pb-4 pl-5 pr-8 rtl:pr-5 rtl:pl-8 bg-transparent focus:border-current border appearance-none outline-none border-solid focus-visible:outline-none cursor-pointer{% if settings.edges_type == 'rounded_corners' %} !rounded-md{% endif %}"
                x-data="{ open: false }"
                @click="open = !open"
                :aria-expanded="open.toString()"
                aria-haspopup="listbox"
                aria-label="{{ option_name }}"
              >
                <div class="flex items-center justify-between">
                  <span x-text="productTitle || '{{ 'products.product.choose_here' | t }}'">{{ 'products.product.choose_here' | t }}</span>
                </div>

                <div x-cloak x-show="open" x-collapse class="absolute mt-4 md:mt-5 -translate-x-5 rtl:translate-x-5 w-full border border-solid bg-[rgba(var(--background-color),1)] z-50{% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %} shadow-lg pt-1 pb-1" role="listbox">
                  <div class="max-h-60 overflow-y-auto scrollbar-body pl-1 pr-1">
                    <div class="pl-4 pr-4 flex pt-2 pb-2 cursor-pointer hover:bg-[rgba(var(--colors-background-secondary),0.5)]" @click="dropdown = ''; productTitle = '';" :class="{ 'bg-[rgba(var(--colors-background-secondary))]': dropdown === '' }">
                      {{ 'products.product.choose_here' | t }}
                    </div>
                    {% for product in product_list %}
                      {% unless product.available %}{% continue %}{% endunless %}
                      <div class="pl-4 pr-4 pt-2 pb-2 flex gap-2 w-full items-center text-start cursor-pointer hover:bg-[rgba(var(--colors-background-secondary),0.5)]" @click="dropdown = '{{ product.id }}'; productTitle = '{{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}';" :class="{ 'bg-[rgba(var(--colors-background-secondary))]': dropdown === '{{ product.id }}' }">
                        {%- liquid
                          assign preview_image = blank
                          if product.featured_media
                            assign preview_image = product.featured_media | image_url: width: 30, height: 30
                          endif
                        -%}
                        {%- style -%}
                          .image-{{ product.id }}-{{ block_id }}-{{ forloop.index }}:before {
                            {% if preview_image != blank %}
                              background-image: url({{ preview_image }});
                            {% else %}
                              background-image: url("data:image/svg+xml,{{ product_placeholder_icon | replace: "#", "%23" | replace: "<", "%3C" | replace: ">", "%3E" | replace: '"', "%22" }}");
                              background-color: #c9c9c9;
                            {% endif %}
                          }
                        {%- endstyle %}
                        {% liquid 
                          assign price = product.price | default: 1999
                          if settings.currency_code_enable
                            assign money_price = price | money_with_currency
                          else 
                            assign money_price = price | money
                          endif 

                          if product.price_varies
                            assign money_price = 'products.product.price.from_price_html' | t: price: money_price
                          endif
                        %}
                        <div class="w-10 h-10 min-w-[40px] min-h-[40px] image-{{ product.id }}-{{ block_id }}-{{ forloop.index }} border border-solid {% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %} before:block before:w-full before:h-full pt-1 pb-1 pl-1 pr-1"></div>
                        <div class="cursor-pointer">{{ product.title | replace: '<', '&lt;' | replace: '>', '&gt;' }} <span x-init="$watch('dropdown', () => { $el.innerHTML = '+ {{ money_price }}' })" class="variant-price-{{ product.id }} text-[rgba(var(--colors-price))]">+ {{ money_price }}</span></div>
                      </div>
                    {% endfor %}
                  </div>
                </div>
              </div>
              <span class="absolute top-1/2 right-4 rtl:right-auto rtl:left-4 -translate-y-1/2 w-2.5 inline-block pointer-events-none">
                {% render 'icon-alls', icon: 'icon-caret' %}
              </span>
              {% if required %}
                <p class="text-required hidden text-[rgba(var(--color-error))] mt-1">{{ 'products.product.customize_option_required' | t }}</p>
              {% endif %}
              {% unless required %}
                <input 
                  class="hidden" 
                  x-model="productTitle"
                  x-on:input.change="setValueBlank($el)"
                  :value="disableInput ? '{% unless hide_when_empty %}{{ 'general.custom_option.option_blank' | t }}{% endunless %}' : productTitle"
                  type="text"
                  name="properties[{{ option_name }}]" 
                  form="{{ product_form_id }}"
                  :disabled="!disableInput" 
                >
              {% endunless %}
              <input
                class="hidden"
                x-model="productTitle"
                x-on:input.change="setValueBlank($el)"
                :value="productTitle"
                type="text"
                name="properties[{{ option_name }}]"
                form="{{ product_form_id_sticky }}"
                placeholder="{{ option_name }}"
              >
            </div>
            {% for product in product_list %}
              {% unless product.available %}{% continue %}{% endunless %}
              <div 
                {% unless product.has_only_default_variant -%}
                  x-cloak
                  x-show="dropdown === '{{ product.id }}'" 
                  class="flex flex-col pt-4 x-product-data-container"
                  x-init="$watch('dropdown', () => { 
                    Array.from($el.querySelectorAll('.option-selected-value')).forEach((el) => { el.innerHTML = '' });
                    Array.from($el.querySelectorAll('input')).forEach((el) => { el.checked = false });
                    if (dropdown === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'
                    }
                  })"
                {% else %}
                  class="hidden"
                  x-init="$watch('dropdown', () => {
                    if (dropdown === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}';
                    }
                  })"
                {% endunless %}
              >
                <input :disabled="dropdown !== `{{ product.id }}`" type="hidden" name="properties[_linked_product_id][]" form="{{ product_form_id }}" {% if product.has_only_default_variant %}value="{{ product.selected_or_first_available_variant.id }}"{% endif %}>
                {% assign block_id = block_id | append: product.id %}
                {% unless product.has_only_default_variant %}
                  {% render 'customize-picker-choose-option',
                    block_id: block_id,
                    product: product,
                    forloop: forloop,
                    show_content_center: show_content_center
                  %}
                {% endunless %}
              </div>
            {% endfor %}
          </fieldset>
          {% if option_select_note != blank %}
            <p class="mt-2">{{ option_select_note | escape }}</p>
          {% endif %}
        {% endunless %}
      {% else %}
        {% if option_label %}
          <p class="mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
        {% endif %}
        {% liquid
          assign option_lists = option_list | split: ";"
        %}
        <div class="select relative outline-none eurus" x-data="{ dropdown: '' }">
          <select
            class="customization-picker w-full pt-3 pb-3 md:pt-4 md:pb-4 pl-5 pr-8 bg-transparent focus:border-current border appearance-none outline-none border-solid focus-visible:outline-none cursor-pointer{% if settings.edges_type == 'rounded_corners' %} !rounded-md{% endif %}"
            form="{{ product_form_id }}"
            x-model="dropdown"
            name="properties[{{ option_name }}]"
            aria-label="{{ option_name }}"
            {% unless required %}
              x-on:input.change="setValueBlank($el)"
            {% endunless %}
            {% if required %}
              x-on:input.change="validation($el)"
              required
            {% endif %}
          >
            <option class="bg-[rgba(var(--background-color),1)]" value="" selected="selected">{{ 'products.product.choose_here' | t }}</option>
            {% for option in option_lists %}  
              <option class="bg-[rgba(var(--background-color),1)]">{{ option }}</option>
            {% endfor %}
          </select>
          <span class="absolute top-1/2 right-4 -translate-y-1/2 w-2.5 inline-block pointer-events-none">
            {% render 'icon-alls', icon: 'icon-caret' %}
          </span>
          {% if required %}
            <p class="text-required hidden text-[rgba(var(--color-error))] mt-1">{{ 'products.product.customize_option_required' | t }}</p>
          {% endif %}
          {% unless required %}
            <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{% unless hide_when_empty %}{{ 'general.custom_option.option_blank' | t }}{% endunless %}' : dropdown">
          {% endunless %}
          <input
            class="hidden"
            :value="dropdown"
            type="text"
            name="properties[{{ option_name }}]"
            form="{{ product_form_id_sticky }}"
            placeholder="{{ option_name }}"
          >
        </div>
        {% if option_select_note != blank %}
          <p class="mt-2">{{ option_select_note | escape }}</p>
        {% endif %}
      {% endif %}
    {% when 'color_swatches' %}
      <fieldset class="" x-data="{ {% if swatch_linked %}datachecked: '',{% endif %} dataCheckedTitle: '' }">
        {% capture property_input %}
          <input 
            x-model="dataCheckedTitle"  
            value=""
            class="customization-picker hidden" 
            type="text" 
            name="properties[{{ option_name }}]" 
            form="{{ product_form_id }}" 
            aria-label="{{ option_name }}"
            {% unless required %}
              x-init="$watch('dataCheckedTitle',() => setValueBlank($el))"
              :disabled="disableInput"
            {% endunless %}
          >
          {% unless required or hide_when_empty %}
            <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : dataCheckedTitle">
          {% endunless %}
          <input
            class="hidden"
            :value="dataCheckedTitle"
            type="text"
            name="properties[{{ option_name }}]"
            form="{{ product_form_id_sticky }}"
            placeholder="{{ option_name }}"
          >
        {% endcapture %}
        {% if swatch_linked %}
          <legend class="mb-1">
            <span class="font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</span><span class="text-[rgba(var(--colors-text-link))] selected-variant-name" x-init="$watch('datachecked', () => { $el.innerHTML = '' })"></span>
          </legend>
          {% liquid
            if settings.edges_type == 'rounded_corners'
              assign rounded = 'rounded-md before:rounded-md'
            endif
            if swatch_style == 'round'
              assign rounded = 'rounded-full before:rounded-full'
            endif 

            assign product_list = ''
            paginate swatch_linked_collections.products by 12
              assign product_list = swatch_linked_collections.products
            endpaginate
            if swatch_linked_products != blank
              assign product_list = swatch_linked_products
            endif
            assign not_available = true
            for product in product_list
              if product.available
                assign not_available = false
              endif
            endfor
          %}
          {% unless not_available %}
            <div class="flex flex-wrap customize-swatch customize-color-swatches-{{ block_id }}{% if show_content_center %} justify-center items-center{% endif %}">
              {% for product in product_list %}
                {% unless product.available %}{% continue %}{% endunless %}
                {%- liquid
                  assign preview_image = blank
                  if product.featured_media
                    assign preview_image = product.featured_media | image_url: width: 100, height: 100
                  endif
                -%}
                {%- style -%}
                  .customize-color-swatches-{{ block_id }} label[for="{{ block_id }}-{{ forloop.index }}"]:before {
                    {% if preview_image != blank %}
                      background-image: url({{ preview_image }});
                    {% else %}
                      background-image: url("data:image/svg+xml,{{ product_placeholder_icon | replace: "#", "%23" | replace: "<", "%3C" | replace: ">", "%3E" | replace: '"', "%22" }}");
                      background-color: #c9c9c9;
                    {% endif %}
                  }
                {%- endstyle %}
                <input x-on:input.change="dataCheckedTitle='{{ product.title | replace: '"', '\\&quot;' | replace: "'", "\\&#39;" | replace: '`', '\\&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'" x-model="datachecked" class="opacity-0 absolute w-10 h-10 -z-20 input-radio" type="radio" id="{{ block_id }}-{{ forloop.index }}" name="{{ block_id }}" value="{{ product.id }}"{% if forloop.first and required %} checked x-init="datachecked = `{{ product.id }}`; dataCheckedTitle='{{ product.title | replace: '"', '\\&quot;' | replace: "'", "\\&#39;" | replace: '`', '\\&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}';"{% endif %}>
                <label 
                  class="mr-1.5 ml-0.5 rtl:ml-1.5 rtl:mr-0.5 color-watches cursor-pointer mt-2 mb-0.5 inline-flex h-10 w-10 border relative {{ rounded }}" 
                  for="{{ block_id }}-{{ forloop.index }}" 
                  data-swatch="{{ product.title | replace: '"', '&quot;' | replace: "'", "&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}"
                  tabindex="0"
                  aria-label="{{ product.title | replace: '"', '&quot;' | replace: "'", "&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}"
                >
                  <span class="h-full w-full color-watches-disable"></span>
                </label>
              {% endfor %}
            </div>
            {% for product in product_list %}
              {% unless product.available %}{% continue %}{% endunless %}
              <div 
                {% unless product.has_only_default_variant %}
                  x-cloak
                  x-show="datachecked === `{{ product.id }}`" 
                  class="x-product-data-container flex flex-col pt-4"
                  x-init="$watch('datachecked', () => { 
                    Array.from($el.querySelectorAll('.option-selected-value')).forEach((el) => { el.innerHTML = '' });
                    Array.from($el.querySelectorAll('input')).forEach((el) => { el.checked = false });
                    if (datachecked === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'
                    }
                  })"
                {% else %}
                  class="hidden"
                  x-init="$watch('datachecked', () => {
                    if (datachecked === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}';
                    }
                  })"
                {% endunless %}
              >
                <input :disabled="datachecked !== `{{ product.id }}`" type="hidden" name="properties[_linked_product_id][]" form="{{ product_form_id }}" {% if product.has_only_default_variant %}value="{{ product.selected_or_first_available_variant.id }}"{% endif %}>
                {% unless product.has_only_default_variant %}
                  {% assign block_id = block_id | append: product.id %}
                  {% render 'customize-picker-choose-option',
                    block_id: block_id,
                    product: product,
                    forloop: forloop,
                    show_content_center: show_content_center
                  %}
                {% endunless %}
              </div>
            {% endfor %}
            {{ property_input }}
          {% endunless %}
        {% else %}
          <legend class="mb-1">
            <span class="font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</span><span class="text-[rgba(var(--colors-text-link))]" x-text="dataCheckedTitle"></span>
          </legend>
          {% liquid
            if settings.edges_type == 'rounded_corners'
              assign rounded = 'rounded-md before:rounded-md'
            endif
            if swatch_style == 'round'
              assign rounded = 'rounded-full before:rounded-full'
            endif 
            
            assign option_lists = swatch_value | newline_to_br | strip_newlines | split: '<br />'
          %}
          <div class="flex flex-wrap customize-swatch customize-color-swatches-{{ block_id }}{% if show_content_center %} justify-center{% endif %}">
            {% for option in option_lists %}
              {% liquid
                assign swatch_image = false
                assign option_key = option | split: ':' | first
                assign option_value = option | split: ':' | last | strip
                if option contains '.'
                  assign swatch_image = true
                else 
                  assign multi_colors = option_value | remove_first: '#' | split: '#'
                endif 
              %}  
              {%- style %}
                {% if swatch_image %}
                  .customize-color-swatches-{{ block_id }} [data-swatch="{{ option_key }}"]:before {
                    background-image: url({{ option_value | file_img_url: "100x100" }});
                  }
                {% elsif multi_colors.size == 3 %}
                  .customize-color-swatches-{{ block_id }} [data-swatch="{{ option_key }}"]:before {
                    background: linear-gradient(45deg, {{ '#' | append: multi_colors[0] }}, {{ '#' | append: multi_colors[0] }} 33.3%, {{ '#' | append: multi_colors[1] }} 33.3%, {{ '#' | append: multi_colors[1] }} 66.6%, {{ '#' | append: multi_colors[2] }} 66.6%, {{ '#' | append: multi_colors[2] }});
                  }
                {% elsif multi_colors.size == 2 %}
                  .customize-color-swatches-{{ block_id }} [data-swatch="{{ option_key }}"]:before {
                    background: linear-gradient(45deg, {{ '#' | append: multi_colors[0] }}, {{ '#' | append: multi_colors[0] }} 50%, {{ '#' | append: multi_colors[1] }} 50%, {{ '#' | append: multi_colors[1] }});
                  }
                {% else %}
                  .customize-color-swatches-{{ block_id }} [data-swatch="{{ option_key }}"]:before {
                    background: {{ option_value }};
                  }
                {% endif %}
              {%- endstyle %}
              <input x-model="dataCheckedTitle" class="opacity-0 absolute w-10 h-10 -z-20 input-radio" type="radio" id="{{ block_id }}-{{ forloop.index }}" name="{{ block_id }}" value="{{ option_key }}"{% if forloop.first and required %} checked x-init="dataCheckedTitle = '{{ option_key }}'"{% endif %}>
              <label 
                class="mr-1.5 ml-0.5 rtl:ml-1.5 rtl:mr-0.5 color-watches cursor-pointer mt-2 mb-0.5 inline-flex h-10 w-10 border relative {{ rounded }}" 
                for="{{ block_id }}-{{ forloop.index }}" 
                data-swatch="{{ option_key }}"
                tabindex="0"
                aria-label="{{ option_key | escape }}"
              >
                <span class="h-full w-full color-watches-disable"></span>
              </label>
            {% endfor %}
          </div>
          {{ property_input }}
        {% endif %}
      </fieldset>
    {% when 'button' %}
      <fieldset x-data="{ {% if swatch_linked %}datachecked: '',{% endif %} dataCheckedTitle: '' }">
        {% capture property_input %}
          <input 
            x-model="dataCheckedTitle"  
            value=""
            class="customization-picker hidden" 
            type="text" 
            name="properties[{{ option_name }}]" 
            form="{{ product_form_id }}" 
            aria-label="{{ option_name }}"
            {% unless required %}
              x-init="$watch('dataCheckedTitle',() => setValueBlank($el))"
              :disabled="disableInput"
            {% endunless %}
          >
            {% unless required or hide_when_empty %}
              <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" :value="disableInput ? '{{ 'general.custom_option.option_blank' | t }}' : dataCheckedTitle">
            {% endunless %}
            <input
              class="hidden"
              :value="dataCheckedTitle"
              type="text"
              name="properties[{{ option_name }}]"
              form="{{ product_form_id_sticky }}"
              placeholder="{{ option_name }}"
            >
        {% endcapture %}
        {% if swatch_linked %}
          {% liquid
            assign product_list = ''
            paginate swatch_linked_collections.products by 12
              assign product_list = swatch_linked_collections.products
            endpaginate
            if swatch_linked_products != blank
              assign product_list = swatch_linked_products
            endif
            assign not_available = true
            for product in product_list
              if product.available
                assign not_available = false
              endif
            endfor
          %}
          {% unless not_available %}
            <legend class="mb-3 font-{{ option_style }}">
              {{ option_label }}{% if required %} *{% endif %}<span x-init="$watch('datachecked', () => { $el.innerHTML = '' })" class="selected-variant-name"></span>
            </legend>
            <div class="flex flex-wrap gap-2{% if show_content_center %} justify-center{% endif %}">
              {% for product in product_list %}  
                {% unless product.available %}{% continue %}{% endunless %}
                <input x-on:input.change="dataCheckedTitle='{{ product.title | replace: '"', '\\&quot;' | replace: "'", "\\&#39;" | replace: '`', '\\&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'" x-model="datachecked" class="opacity-0 absolute w-10 h-10 -z-20 input-radio" type="radio" id="{{ block_id }}-{{ forloop.index }}" name="{{ block_id }}" value="{{ product.id }}"{% if forloop.first and required %} checked x-init="datachecked = `{{ product.id }}`"{% endif %}>
                <label class="flex items-center gap-2 outline-none cursor-pointer pl-4 pr-4 pt-2 pb-2 border bg-[rgba(var(--background-color),1)]{% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %}" for="{{ block_id }}-{{ forloop.index }}">
                  {%- liquid
                    assign preview_image = blank
                    if product.featured_media
                      assign preview_image = product.featured_media | image_url: width: 30, height: 30
                    endif
                  -%}
                  {%- style -%}
                    .image-{{ product.id }}-{{ block_id }}-{{ forloop.index }}:before {
                      {% if preview_image != blank %}
                        background-image: url({{ preview_image }});
                      {% else %}
                        background-image: url("data:image/svg+xml,{{ product_placeholder_icon | replace: "#", "%23" | replace: "<", "%3C" | replace: ">", "%3E" | replace: '"', "%22" }}");
                        background-color: #c9c9c9;
                      {% endif %}
                    }
                    .input-radio:checked+label .variant-price-{{ product.id }} {
                      color: rgba(var(--background-color), 1);
                    }
                  {%- endstyle %}
                  {% liquid 
                    assign price = product.price | default: 1999
                    if settings.currency_code_enable
                      assign money_price = price | money_with_currency
                    else 
                      assign money_price = price | money
                    endif 

                    if product.price_varies
                      assign money_price = 'products.product.price.from_price_html' | t: price: money_price
                    endif
                  %}
                  <div class="w-10 h-10 min-w-[40px] min-h-[40px] bg-[rgba(var(--background-color),1)] image-{{ product.id }}-{{ block_id }}-{{ forloop.index }} {% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %} border border-solid before:block before:w-full before:h-full pt-1 pb-1 pl-1 pr-1"></div>
                  <div class="cursor-pointer">{{ product.title | replace: '<', '&lt;' | replace: '>', '&gt;' }} <span x-init="$watch('datachecked', () => { $el.innerHTML = '+ {{ money_price }}' })" class="variant-price-{{ product.id }} text-[rgba(var(--colors-price))]">+ {{ money_price }}</span></div>
                </label>
              {% endfor %}
            </div>
            {% for product in product_list %}
              {% unless product.available %}{% continue %}{% endunless %}
              <div 
                {% unless product.has_only_default_variant %}
                  x-cloak
                  x-show="datachecked === `{{ product.id }}`" 
                  class="x-product-data-container flex flex-col pt-4"
                  x-init="$watch('datachecked', () => { 
                    Array.from($el.querySelectorAll('.option-selected-value')).forEach((el) => { el.innerHTML = '' });
                    Array.from($el.querySelectorAll('input')).forEach((el) => { el.checked = false });
                    if (datachecked === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'
                    }
                  })"
                {% else %}
                  class="hidden"
                  x-init="$watch('datachecked', () => {
                    if (datachecked === `{{ product.id }}`) {
                      $el.closest('.x-block-custom-options').querySelector('.selected-variant-name').innerHTML = ': {{ product.title | replace: '"', '&quot;' | replace: "'", "\\&#39;" | replace: '`', '&#96;' | replace: ' ', '&nbsp;' | replace: '<', '&lt;' | replace: '>', '&gt;' }}'
                    }
                  })"
                {% endunless %}
              >
                <input :disabled="datachecked !== `{{ product.id }}`" type="hidden" name="properties[_linked_product_id][]" form="{{ product_form_id }}" {% if product.has_only_default_variant %}value="{{ product.selected_or_first_available_variant.id }}"{% endif %}>
                  {% unless product.has_only_default_variant %}
                    {% assign block_id = block_id | append: product.id %}
                    {% render 'customize-picker-choose-option',
                      block_id: block_id,
                      product: product,
                      forloop: forloop,
                      show_content_center: show_content_center
                    %}
                  {% endunless %}
              </div>
            {% endfor %}
            {{ property_input }}
          {% endunless %}
        {% else %}
          <legend class="mb-3 font-{{ option_style }}">
            {{ option_label }}{% if required %} *{% endif %}
          </legend>
          {% liquid
            assign option_lists = swatch_value | newline_to_br | strip_newlines | split: '<br />'
          %}
          <div class="flex flex-wrap gap-2{% if show_content_center %} justify-center{% endif %}">
            {% for option in option_lists %}  
              {% liquid
                assign swatch_name = option | split: ':' | first
              %}
              <input x-model="dataCheckedTitle" class="opacity-0 absolute w-10 h-10 -z-20 input-radio" type="radio" id="{{ block_id }}-{{ forloop.index }}" name="{{ block_id }}" value="{{ option }}"{% if forloop.first and required %} checked x-init="dataCheckedTitle = '{{ option }}'"{% endif %}>
              <label class="flex items-center outline-none cursor-pointer pl-4 pr-4 pt-2 pb-2 border bg-[rgba(var(--background-color),1)]{% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %}" for="{{ block_id }}-{{ forloop.index }}">
                <span>{{ swatch_name }}</span>
              </label>
            {% endfor %}
          </div>
          {{ property_input }}
        {% endif %}
      </fieldset>
    {% when 'file_upload' %}
      <div class="drop-zone-wrap" x-init="setDragAndDrop($el)" x-data="{file: null}">
        {% if option_label %}
          <p class="mb-3 font-{{ option_style }}">{{ option_label }}{% if required %} *{% endif %}</p>
        {% endif %}
        <input 
          class="customization-picker drop-zone__input hidden customization-file"
          x-ref="fileInput1"
          x-on:change="file = $refs.fileInput1.files[0]; $refs.fileInput2.files = $refs.fileInput1.files"
          id="{{ block_id }}" 
          type="file" 
          name="properties[{{ option_name }}]" 
          form="{{ product_form_id }}" 
          {% if required %}
            required
          {% else %}
            x-on:input.change="setValueBlank($el)"
          {% endif %} 
          aria-label="{{ option_name }}" />
        <input 
          class="hidden" 
          x-ref="fileInput2"
          type="file" 
          name="properties[{{ option_name }}]" 
          form="{{ product_form_id_sticky }}"  
          aria-label="{{ option_name }}" />
        <div class="drop-zone duration-200 border-2 border-dotted{% if settings.edges_type == 'rounded_corners' %} rounded-md{% endif %}">
          <div class="cursor-pointer flex flex-col items-center pt-7 pb-7 pl-5 pr-5">
            <span class="inline-block text-center w-9 h-8 opacity-50 mb-2">{% render 'icon-alls', icon: 'icon-file-upload' %}</span>
            <p class="text-center text-[95%]">{{ 'products.product.file_upload' | t }}</p>
            <span class="opacity-50 text-[80%] mt-2">{{ 'products.product.file_upload_info' | t }}</span>
          </div>
        </div>
        <div class="drop-zone__thumb hidden gap-2 border border-dotted pt-4 pl-4 pb-4 pr-2">
          <div class="dd-thumbnail w-10 h-10 bg-cover flex">
            <span class="inline-block icon-file w-10 h-10">{% render 'icon-alls', icon: 'icon-file' %}</span>
          </div>
          <div class="dd-file-info flex justify-between gap-2 w-full">
            <div class="info-text">
              <p class="dd-file-info__title p-break-words"></p>
              <p class="dd-file-info__type text-[80%] mt-1 p-break-words"></p>
            </div>
            <button @click="removeFile($event, $el)" class="w-10 min-w-[40px] pl-2 pr-2 opacity-50" aria-label="Delete">{% render 'icon-alls', icon: 'icon-remove' %}</button>
          </div>
        </div>
        <span class="mt-1 hidden text-[rgba(var(--color-error))] error-max-file">{{ 'products.product.msg_error_max_file' | t }} </span>
        <span class="mt-1 text-required text-[rgba(var(--color-error))] hidden">{{ 'products.product.customize_option_required' | t }}</span>
        
      </div>
      {% if option_file_note != blank %}
        <p class="mt-2">{{ option_file_note | escape }}</p>
      {% endif %}
      {% unless required or hide_when_empty %}
        <input :disabled="!disableInput" class="hidden" name="properties[{{ option_name }}]" form="{{ product_form_id }}" value="{{ 'general.custom_option.option_blank' | t }}">
      {% endunless %}
  {% endcase %}
  {% unless select_linked or swatch_linked %}
    {% if linked_product != blank %}
      <input {% if picker_type != 'color_picker' %}:disabled="disableInput"{% endif %} value="{{ linked_product.selected_or_first_available_variant.id }}" type="hidden" name="properties[_linked_product_id][]" form="{{ product_form_id }}">
    {% endif %}
  {% endunless %}
</div>
<script src="{{ 'customize-picker.js' | asset_url }}" defer></script>